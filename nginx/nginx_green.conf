worker_processes  1;  #running on AWS EC2 t2.micro with 1 CPU core

events {
  worker_connections 1024;
}

http {
  
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=300r/s;  #rate limiting 300 qps per ip

    # access_log /dev/stdout;
    # error_log /dev/stderr;
    error_log /var/log/nginx/error.log;    

    log_format predict_log '$remote_addr - - [$time_local] "$request" '
                          '"$status" $body_bytes_sent "$http_referer" '
                          '"$http_user_agent"';


    upstream green {
        server torchserve_green:8080;  # torchserve_green_inference
    }

    upstream blue {
        server torchserve_blue:8080;  # torchserve_blue_inference
    }

    server {
        listen 80;
        server_name localhost;  #dev name
        limit_req zone=req_limit_per_ip burst=100 nodelay;  #tolerance for bump request
        
        location /predict {
            if ($request_method = POST) {
                access_log /var/log/nginx/prod_access.log predict_log;
            }
            proxy_pass http://green/predictions/regressor;      #default to green instance in nginx_green.conf
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /test/predict {
            if ($request_method = POST) {
                access_log /var/log/nginx/test_access.log predict_log;
            }      
            proxy_pass http://blue/predictions/regressor;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /green/ {
            proxy_pass http://green/;
            rewrite ^/green(/.*)$ $1 break; 
        }

        location /blue/ {
            proxy_pass http://blue/;
            rewrite ^/blue(/.*)$ $1 break;  
        }
    }
}
